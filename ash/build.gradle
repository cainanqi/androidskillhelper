apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
// 这里添加下面两行代码。
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 29
    buildToolsVersion "28.0.3"
    resourcePrefix "ash"

    defaultConfig {
        // applicationId "com.yanzhenjie.andserver.sample" // 这一行要删除，因为library不允许有applicationId。
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName '1.0.0'
    }

    compileOptions {
        sourceCompatibility build_versions.java_version
        targetCompatibility build_versions.java_version
    }
    dataBinding {
        enabled = true
    }

}
dependencies {
    // 如果你的library有依赖别的jar，这里要把jar依赖进来。
    implementation fileTree(dir: 'libs', includes: ['*.jar'])
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //解析数据，Gson方式json
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    //结合RxJava2使用
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    //线程切换
    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    implementation "com.facebook.stetho:stetho:${versions.stetho}"
    implementation "com.facebook.stetho:stetho-okhttp3:${versions.stetho}"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    //RxLife生命周期绑定
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.0.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.0.1'
    implementation "com.afollestad.material-dialogs:core:${versions.material_dialogs}"
}

// 项目引用的版本号，比如compile 'com.yanzhenjie:andserver:1.0.1'中的1.0.1就是这里配置的。
version = "1.0.0"

// 定义两个链接，下面会用到。
def siteUrl = 'https://https://github.com/cainanqi/androidskillhelper' // 项目主页。
def gitUrl = 'https://github.com/cainanqi/androidskillhelper.git' // Git仓库的url。

// 唯一包名，比如compile 'com.yanzhenjie:andserver:1.0.1'中的com.yanzhenjie就是这里配置的。
group = "com.cainanqi"
install {
    repositories.mavenInstaller {
        // 生成pom.xml和参数
        pom {
            project {
                packaging 'aar'
                // 项目描述，复制我的话，这里需要修改。
                name 'AndroidSkillHelper'// 可选，项目名称。
                description 'The Android Helper'// 可选，项目描述。
                url siteUrl // 项目主页，这里是引用上面定义好。

                // 软件开源协议，现在一般都是Apache License2.0吧，复制我的，这里不需要修改。
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                //填写开发者基本信息，复制我的，这里需要修改。
                developers {
                    developer {
                        id 'cainanqi' // 开发者的id。
                        name 'cainanqi' // 开发者名字。
                        email 'cainanqi@2014@gmail.com' // 开发者邮箱。
                    }
                }

                // SCM，复制我的，这里不需要修改。
                scm {
                    connection gitUrl // Git仓库地址。
                    developerConnection gitUrl // Git仓库地址。
                    url siteUrl // 项目主页。
                }
            }
        }
    }
}
// 生成jar包的task，不需要修改。
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
// 生成jarDoc的task，不需要修改。
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // destinationDir = file("../javadoc/")
    failOnError false // 忽略注释语法错误，如果用jdk1.8你的注释写的不规范就编译不过。
}
// 生成javaDoc的jar，不需要修改。
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user") // Bintray的用户名。
    key = properties.getProperty("bintray.apikey") // Bintray刚才保存的ApiKey。

    configurations = ['archives']
    pkg {
        repo = "AndroidSkillHelper"  // 上传到maven库。（这里要特别注意，如果写了maven报404错误，请在bintray创建一个仓库，这里填改成你创建的仓库的名字，如何创建请看下图。）
        name = "ash"  // 发布到Bintray上的项目名字，这里的名字不是compile 'com.yanzhenjie:andserver:1.0.1'中的andserver。
        userOrg = 'cainanqi' // Bintray的用户名，2016年11月更新。
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true // 是否是公开项目。
    }
}
repositories {
    mavenCentral()
}
